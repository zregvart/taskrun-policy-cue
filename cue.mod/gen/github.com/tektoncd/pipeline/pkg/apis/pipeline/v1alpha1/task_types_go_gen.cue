// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TaskRunResultType default task run result value
#TaskRunResultType: v1beta1.#ResultType & 1

// PipelineResourceResultType default pipeline result value
#PipelineResourceResultType: v1beta1.#ResultType & 2

// UnknownResultType default unknown result type value
#UnknownResultType: v1beta1.#ResultType & 10

// TaskSpec defines the desired state of Task.
#TaskSpec: {
	v1beta1.#TaskSpec

	// Inputs is an optional set of parameters and resources which must be
	// supplied by the user when a Task is executed by a TaskRun.
	// +optional
	inputs?: null | #Inputs @go(Inputs,*Inputs)

	// Outputs is an optional set of resources and results produced when this
	// Task is run.
	// +optional
	outputs?: null | #Outputs @go(Outputs,*Outputs)
}

// TaskResult used to describe the results of a task
#TaskResult: v1beta1.#TaskResult

// Step embeds the Container type, which allows it to include fields not
// provided by Container.
#Step: v1beta1.#Step

// Sidecar has nearly the same data structure as Step, consisting of a Container and an optional Script, but does not have the ability to timeout.
#Sidecar: v1beta1.#Sidecar

// Task represents a collection of sequential steps that are run as part of a
// Pipeline using a set of inputs and producing a set of outputs. Tasks execute
// when TaskRuns are created that provide the input parameters and resources and
// output resources the Task requires.
//
// +k8s:openapi-gen=true
#Task: {
	metav1.#TypeMeta

	// +optional
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the Task from the client
	// +optional
	spec: #TaskSpec @go(Spec)
}

// Inputs are the requirements that a task needs to run a Build.
#Inputs: {
	// Resources is a list of the input resources required to run the task.
	// Resources are represented in TaskRuns as bindings to instances of
	// PipelineResources.
	// +optional
	resources?: [...v1beta1.#TaskResource] @go(Resources,[]v1beta1.TaskResource)

	// Params is a list of input parameters required to run the task. Params
	// must be supplied as inputs in TaskRuns unless they declare a default
	// value.
	// +optional
	params?: [...v1beta1.#ParamSpec] @go(Params,[]v1beta1.ParamSpec)
}

// TaskResource defines an input or output Resource declared as a requirement
// by a Task. The Name field will be used to refer to these Resources within
// the Task definition, and when provided as an Input, the Name will be the
// path to the volume mounted containing this Resource as an input (e.g.
// an input Resource named `workspace` will be mounted at `/workspace`).
#TaskResource: v1beta1.#TaskResource

// Outputs allow a task to declare what data the Build/Task will be producing,
// i.e. results such as logs and artifacts such as images.
#Outputs: {
	// +optional
	results?: [...#TestResult] @go(Results,[]TestResult)

	// +optional
	resources?: [...v1beta1.#TaskResource] @go(Resources,[]v1beta1.TaskResource)
}

// TestResult allows a task to specify the location where test logs
// can be found and what format they will be in.
#TestResult: {
	// Name declares the name by which a result is referenced in the Task's
	// definition. Results may be referenced by name in the definition of a
	// Task's steps.
	name: string @go(Name)

	// TODO: maybe this is an enum with types like "go test", "junit", etc.
	format: string @go(Format)
	path:   string @go(Path)
}

// TaskList contains a list of Task
#TaskList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Task] @go(Items,[]Task)
}

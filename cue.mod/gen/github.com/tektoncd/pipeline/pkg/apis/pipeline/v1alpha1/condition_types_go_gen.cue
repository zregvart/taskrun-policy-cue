// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	"github.com/tektoncd/pipeline/pkg/apis/resource/v1alpha1"
)

// Condition declares a step that is used to gate the execution of a Task in a Pipeline.
// A condition execution (ConditionCheck) evaluates to either true or false
// +k8s:openapi-gen=true
#Condition: {
	metav1.#TypeMeta

	// +optional
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the Condition from the client
	// +optional
	spec: #ConditionSpec @go(Spec)
}

// ConditionCheckStatus defines the observed state of ConditionCheck
#ConditionCheckStatus: v1beta1.#ConditionCheckStatus

// ConditionCheckStatusFields holds the fields of ConfigurationCheck's status.
// This is defined separately and inlined so that other types can readily
// consume these fields via duck typing.
#ConditionCheckStatusFields: v1beta1.#ConditionCheckStatusFields

// ConditionSpec defines the desired state of the Condition
#ConditionSpec: {
	// Check declares container whose exit code determines where a condition is true or false
	check?: v1beta1.#Step @go(Check)

	// Description is a user-facing description of the condition that may be
	// used to populate a UI.
	// +optional
	description?: string @go(Description)

	// Params is an optional set of parameters which must be supplied by the user when a Condition
	// is evaluated
	// +optional
	params?: [...v1beta1.#ParamSpec] @go(Params,[]v1beta1.ParamSpec)

	// Resources is a list of the ConditionResources required to run the condition.
	// +optional
	resources?: [...v1alpha1.#ResourceDeclaration] @go(Resources,[]github.com/tektoncd/pipeline/pkg/apis/resource/v1alpha1.ResourceDeclaration)
}

// ConditionCheck represents a single evaluation of a Condition step.
#ConditionCheck: #TaskRun

// ConditionList contains a list of Conditions
#ConditionList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Condition] @go(Items,[]Condition)
}

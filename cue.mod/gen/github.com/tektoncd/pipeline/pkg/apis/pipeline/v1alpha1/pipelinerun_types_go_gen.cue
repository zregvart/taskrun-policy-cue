// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/pod"
)

// PipelineRun represents a single execution of a Pipeline. PipelineRuns are how
// the graph of Tasks declared in a Pipeline are executed; they specify inputs
// to Pipelines such as parameter values and capture operational aspects of the
// Tasks execution such as service account and tolerations. Creating a
// PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.
//
// +k8s:openapi-gen=true
#PipelineRun: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// +optional
	spec?: #PipelineRunSpec @go(Spec)

	// +optional
	status?: v1beta1.#PipelineRunStatus @go(Status)
}

// PipelineRunSpec defines the desired state of PipelineRun
#PipelineRunSpec: {
	// +optional
	pipelineRef?: null | v1beta1.#PipelineRef @go(PipelineRef,*v1beta1.PipelineRef)

	// +optional
	pipelineSpec?: null | #PipelineSpec @go(PipelineSpec,*PipelineSpec)

	// Resources is a list of bindings specifying which actual instances of
	// PipelineResources to use for the resources the Pipeline has declared
	// it needs.
	resources?: [...v1beta1.#PipelineResourceBinding] @go(Resources,[]v1beta1.PipelineResourceBinding)

	// Params is a list of parameter names and values.
	params?: [...v1beta1.#Param] @go(Params,[]v1beta1.Param)

	// +optional
	serviceAccountName?: string @go(ServiceAccountName)

	// +optional
	serviceAccountNames?: [...v1beta1.#PipelineRunSpecServiceAccountName] @go(ServiceAccountNames,[]v1beta1.PipelineRunSpecServiceAccountName)

	// Used for cancelling a pipelinerun (and maybe more later on)
	// +optional
	status?: v1beta1.#PipelineRunSpecStatus @go(Status)

	// Time after which the Pipeline times out. Defaults to never.
	// Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// PodTemplate holds pod specific configuration
	podTemplate?: null | pod.#Template @go(PodTemplate,*github.com/tektoncd/pipeline/pkg/apis/pipeline/pod.Template)

	// Workspaces holds a set of workspace bindings that must match names
	// with those declared in the pipeline.
	// +optional
	workspaces?: [...v1beta1.#WorkspaceBinding] @go(Workspaces,[]v1beta1.WorkspaceBinding)

	// TaskRunSpecs holds a set of task specific specs
	// +optional
	taskRunSpecs?: [...#PipelineTaskRunSpec] @go(TaskRunSpecs,[]PipelineTaskRunSpec)
}

// PipelineRunSpecStatus defines the pipelinerun spec status the user can provide
#PipelineRunSpecStatus: v1beta1.#PipelineRunSpecStatus

// PipelineRunSpecStatusCancelled indicates that the user wants to cancel the task,
// if not already cancelled or terminated
#PipelineRunSpecStatusCancelled: "PipelineRunCancelled"

// PipelineResourceRef can be used to refer to a specific instance of a Resource
#PipelineResourceRef: v1beta1.#PipelineResourceRef

// PipelineRef can be used to refer to a specific instance of a Pipeline.
// Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64
#PipelineRef: v1beta1.#PipelineRef

// PipelineRunStatus defines the observed state of PipelineRun
#PipelineRunStatus: v1beta1.#PipelineRunStatus

// PipelineRunStatusFields holds the fields of PipelineRunStatus' status.
// This is defined separately and inlined so that other types can readily
// consume these fields via duck typing.
#PipelineRunStatusFields: v1beta1.#PipelineRunStatusFields

// PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status
#PipelineRunTaskRunStatus: v1beta1.#PipelineRunTaskRunStatus

// PipelineRunSpecServiceAccountName can be used to configure specific
// ServiceAccountName for a concrete Task
#PipelineRunSpecServiceAccountName: v1beta1.#PipelineRunSpecServiceAccountName

// PipelineRunList contains a list of PipelineRun
#PipelineRunList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items?: [...#PipelineRun] @go(Items,[]PipelineRun)
}

// PipelineTaskRun reports the results of running a step in the Task. Each
// task has the potential to succeed or fail (based on the exit code)
// and produces logs.
#PipelineTaskRun: v1beta1.#PipelineTaskRun

// PipelineTaskRunSpec holds task specific specs
#PipelineTaskRunSpec: {
	pipelineTaskName?:       string               @go(PipelineTaskName)
	taskServiceAccountName?: string               @go(TaskServiceAccountName)
	taskPodTemplate?:        null | pod.#Template @go(TaskPodTemplate,*github.com/tektoncd/pipeline/pkg/apis/pipeline/pod.Template)
}

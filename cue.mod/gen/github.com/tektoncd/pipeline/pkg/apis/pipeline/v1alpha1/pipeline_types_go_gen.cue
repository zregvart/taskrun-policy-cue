// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/tektoncd/pipeline/pkg/apis/pipeline/v1alpha1

package v1alpha1

import (
	"github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PipelineSpec defines the desired state of Pipeline.
#PipelineSpec: {
	// Description is a user-facing description of the pipeline that may be
	// used to populate a UI.
	// +optional
	description?: string @go(Description)

	// Resources declares the names and types of the resources given to the
	// Pipeline's tasks as inputs and outputs.
	resources?: [...v1beta1.#PipelineDeclaredResource] @go(Resources,[]v1beta1.PipelineDeclaredResource)

	// Tasks declares the graph of Tasks that execute when this Pipeline is run.
	tasks?: [...#PipelineTask] @go(Tasks,[]PipelineTask)

	// Params declares a list of input parameters that must be supplied when
	// this Pipeline is run.
	params?: [...v1beta1.#ParamSpec] @go(Params,[]v1beta1.ParamSpec)

	// Workspaces declares a set of named workspaces that are expected to be
	// provided by a PipelineRun.
	// +optional
	workspaces?: [...v1beta1.#PipelineWorkspaceDeclaration] @go(Workspaces,[]v1beta1.PipelineWorkspaceDeclaration)

	// Results are values that this pipeline can output once run
	// +optional
	results?: [...v1beta1.#PipelineResult] @go(Results,[]v1beta1.PipelineResult)
}

// PipelineResult used to describe the results of a pipeline
#PipelineResult: v1beta1.#PipelineResult

// TaskKind defines the type of Task used by the pipeline.
#TaskKind: v1beta1.#TaskKind // #enumTaskKind

#enumTaskKind:
	#NamespacedTaskKind |
	#ClusterTaskKind

// NamespacedTaskKind indicates that the task type has a namepace scope.
#NamespacedTaskKind: v1beta1.#TaskKind & "Task"

// ClusterTaskKind indicates that task type has a cluster scope.
#ClusterTaskKind: v1beta1.#TaskKind & "ClusterTask"

// Pipeline describes a list of Tasks to execute. It expresses how outputs
// of tasks feed into inputs of subsequent tasks.
// +k8s:openapi-gen=true
#Pipeline: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec holds the desired state of the Pipeline from the client
	// +optional
	spec: #PipelineSpec @go(Spec)

	// Status is deprecated.
	// It usually is used to communicate the observed state of the Pipeline from
	// the controller, but was unused as there is no controller for Pipeline.
	// +optional
	status?: null | #PipelineStatus @go(Status,*PipelineStatus)
}

// PipelineStatus does not contain anything because Pipelines on their own
// do not have a status, they just hold data which is later used by a
// PipelineRun.
// Deprecated
#PipelineStatus: {
}

// PipelineTask defines a task in a Pipeline, passing inputs from both
// Params and from the output of previous tasks.
#PipelineTask: {
	// Name is the name of this task within the context of a Pipeline. Name is
	// used as a coordinate with the `from` and `runAfter` fields to establish
	// the execution order of tasks relative to one another.
	name?: string @go(Name)

	// TaskRef is a reference to a task definition.
	// +optional
	taskRef?: null | v1beta1.#TaskRef @go(TaskRef,*v1beta1.TaskRef)

	// TaskSpec is specification of a task
	// +optional
	taskSpec?: null | #TaskSpec @go(TaskSpec,*TaskSpec)

	// Conditions is a list of conditions that need to be true for the task to run
	// +optional
	conditions?: [...v1beta1.#PipelineTaskCondition] @go(Conditions,[]v1beta1.PipelineTaskCondition)

	// Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False
	// +optional
	retries?: int @go(Retries)

	// RunAfter is the list of PipelineTask names that should be executed before
	// this Task executes. (Used to force a specific ordering in graph execution.)
	// +optional
	runAfter?: [...string] @go(RunAfter,[]string)

	// Resources declares the resources given to this task as inputs and
	// outputs.
	// +optional
	resources?: null | v1beta1.#PipelineTaskResources @go(Resources,*v1beta1.PipelineTaskResources)

	// Parameters declares parameters passed to this task.
	// +optional
	params?: [...v1beta1.#Param] @go(Params,[]v1beta1.Param)

	// Workspaces maps workspaces from the pipeline spec to the workspaces
	// declared in the Task.
	// +optional
	workspaces?: [...v1beta1.#WorkspacePipelineTaskBinding] @go(Workspaces,[]v1beta1.WorkspacePipelineTaskBinding)

	// Time after which the TaskRun times out. Defaults to 1 hour.
	// Specified TaskRun timeout should be less than 24h.
	// Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)
}

// PipelineTaskList is a list of PipelineTasks
#PipelineTaskList: [...#PipelineTask]

// PipelineTaskParam is used to provide arbitrary string parameters to a Task.
#PipelineTaskParam: v1beta1.#PipelineTaskParam

// PipelineTaskCondition allows a PipelineTask to declare a Condition to be evaluated before
// the Task is run.
#PipelineTaskCondition: v1beta1.#PipelineTaskCondition

// PipelineDeclaredResource is used by a Pipeline to declare the types of the
// PipelineResources that it will required to run and names which can be used to
// refer to these PipelineResources in PipelineTaskResourceBindings.
#PipelineDeclaredResource: v1beta1.#PipelineDeclaredResource

// PipelineTaskResources allows a Pipeline to declare how its DeclaredPipelineResources
// should be provided to a Task as its inputs and outputs.
#PipelineTaskResources: v1beta1.#PipelineTaskResources

// PipelineTaskInputResource maps the name of a declared PipelineResource input
// dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources
// that should be used. This input may come from a previous task.
#PipelineTaskInputResource: v1beta1.#PipelineTaskInputResource

// PipelineTaskOutputResource maps the name of a declared PipelineResource output
// dependency in a Task to the resource in the Pipeline's DeclaredPipelineResources
// that should be used.
#PipelineTaskOutputResource: v1beta1.#PipelineTaskOutputResource

// TaskRef can be used to refer to a specific instance of a task.
// Copied from CrossVersionObjectReference: https://github.com/kubernetes/kubernetes/blob/169df7434155cbbc22f1532cba8e0a9588e29ad8/pkg/apis/autoscaling/types.go#L64
#TaskRef: v1beta1.#TaskRef

// PipelineList contains a list of Pipeline
#PipelineList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Pipeline] @go(Items,[]Pipeline)
}
